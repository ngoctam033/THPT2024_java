# file docker-compose.yml dùng để cấu hình các dịch vụ trong project
services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper-1
    # restart: always
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka-1 
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INSIDE://kafka-1:9093,OUTSIDE://localhost:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=OUTSIDE
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
      - app-network
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9093 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka-1:9093 --create --if-not-exists --topic thpt_2024 --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-1:9093 --list
      "

  db:
      image: postgres:13
      container_name: postgres-1
      environment:
        POSTGRES_DB: thpt2024
        POSTGRES_USER: thpt2024
        POSTGRES_PASSWORD: thpt2024
        POSTGRES_HOST_AUTH_METHOD: trust
      ports:
        - "5432:5432"
      volumes:
        - ./init-db:/docker-entrypoint-initdb.d
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - app-network 

  kafka_consumer:
    build:
      context: ./kafka_consumer
      dockerfile: Dockerfile
    container_name: kafka-consumer
    volumes:
      - ./kafka_consumer/target/kafka-consumer-0.0.1-SNAPSHOT.jar:/app/kafka-consumer.jar
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - app-network

  visualization_service:
    build:
      context: ./visualization_service  # Thay đổi đường dẫn nếu cần
      dockerfile: Dockerfile
    container_name: visualization-service
    volumes:
      - ./visualization_service:/app
    environment:
      - FLASK_ENV=development
      - FLASK_APP=visualization_service.py 
    ports:
      - "5000:5000"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  # cấu hình dịch vụ crawler
  crawler_tuoitrethudo:
    build:
      context: ./crawler_tuoitrethudo
      dockerfile: Dockerfile
    container_name: crawler-tuoitrethudo
    depends_on:
      - kafka
    volumes:
      - ./crawler_tuoitrethudo/target/crawler_tuoitrethudo-1.0-SNAPSHOT.jar:/app/crawler.jar
    networks: 
      - app-network

  crawler_congthuong:
    build:
      context: ./crawler_congthuong
      dockerfile: Dockerfile
    container_name: crawler-congthuong
    depends_on:
      - kafka
    volumes:
      - ./crawler_congthuong/target/crawler_congthuong-1.0-SNAPSHOT.jar:/app/crawler.jar
    networks:
      - app-network

  crawler_dantri:
      build:
        context: ./crawler_dantri
        dockerfile: Dockerfile
      container_name: crawler-dantri
      depends_on:
        - kafka
      volumes:
        - ./crawler_dantri/target/crawler_dantri-1.0-SNAPSHOT.jar:/app/crawler.jar
      networks: 
        - app-network

  crawler_kinhtedothi:
    build:
      context: ./crawler_kinhtedothi
      dockerfile: Dockerfile
    container_name: crawler-kinhtedothi
    depends_on:
      - kafka
    volumes:
      - ./crawler_kinhtedothi/target/crawler_kinhtedothi-1.0-SNAPSHOT.jar:/app/crawler.jar
    networks:
      - app-network  

  crawler_laodongthudo:
    build:
      context: ./crawler_laodongthudo
      dockerfile: Dockerfile
    container_name: crawler-laodongthudo
    depends_on:
      - kafka
    volumes:
      - ./crawler_laodongthudo/target/crawler_laodongthudo-1.0-SNAPSHOT.jar:/app/crawler.jar
    networks:
      - app-network 

  crawler_thoibaovtv:
    build:
      context: ./crawler_thoibaovtv
      dockerfile: Dockerfile
    container_name: crawler-thoibaovtv
    depends_on:
      - kafka
    volumes:
      - ./crawler_thoibaovtv/target/crawler_thoibaovtv-1.0-SNAPSHOT.jar:/app/crawler.jar
    networks:
      - app-network 

  crawler_saigongiaiphong:
    build:
      context: ./crawler_saigongiaiphong
      dockerfile: Dockerfile
    container_name: crawler-saigongiaiphong
    depends_on:
      - kafka
    volumes:
      - ./crawler_saigongiaiphong/target/crawler_saigongiaiphong-1.0-SNAPSHOT.jar:/app/crawler.jar
    networks:
      - app-network 

  crawler_vnexpress:
    build:
      context: ./crawler_vnexpress
      dockerfile: Dockerfile
    container_name: crawler-vnexpress
    depends_on:
      - kafka
    volumes:
      - ./crawler_vnexpress/target/crawler_vnexpress-1.0-SNAPSHOT.jar:/app/crawler.jar
    networks:
      - app-network 

networks:
  app-network:
    driver: bridge